{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nleft_drive_smart = Motor(Ports.PORT1, 1.0, False)\nright_drive_smart = Motor(Ports.PORT2, 1.0, True)\n\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, brain_inertial, 200)\nLift_motor_a = Motor(Ports.PORT10, False)\nLift_motor_b = Motor(Ports.PORT11, True)\nLift = MotorGroup(Lift_motor_a, Lift_motor_b)\ncontroller = Controller()\nBottomBumper = Bumper(Ports.PORT8)\nTopBumper = Bumper(Ports.PORT9)\nIntake_motor_a = Motor(Ports.PORT3, False)\nIntake_motor_b = Motor(Ports.PORT4, True)\nIntake = MotorGroup(Intake_motor_a, Intake_motor_b)\nAutonomous = Touchled(Ports.PORT7)\nAutoRedo = Touchled(Ports.PORT5)\n\n\n\n# Make random actually random\ndef setRandomSeedUsingAccel():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    urandom.seed(int(xaxis + yaxis + zaxis))\n    \n# Set random seed \nsetRandomSeedUsingAccel()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    brain_inertial.calibrate()\n    while brain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n\n# define variables used for controlling motors based on controller inputs\ncontroller_left_shoulder_control_motors_stopped = True\ncontroller_right_shoulder_control_motors_stopped = True\ndrivetrain_l_needs_to_be_stopped_controller = False\ndrivetrain_r_needs_to_be_stopped_controller = False\n\n# define a task that will handle monitoring inputs from controller\ndef rc_auto_loop_function_controller():\n    global drivetrain_l_needs_to_be_stopped_controller, drivetrain_r_needs_to_be_stopped_controller, controller_left_shoulder_control_motors_stopped, controller_right_shoulder_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axisA + axisC\n            # right = axisA - axisC\n            drivetrain_left_side_speed = controller.axisA.position() + controller.axisC.position()\n            drivetrain_right_side_speed = controller.axisA.position() - controller.axisC.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n            # check the buttonLUp/buttonLDown status\n            # to control Lift\n            if controller.buttonLUp.pressing():\n                Lift.spin(FORWARD)\n                controller_left_shoulder_control_motors_stopped = False\n            elif controller.buttonLDown.pressing():\n                Lift.spin(REVERSE)\n                controller_left_shoulder_control_motors_stopped = False\n            elif not controller_left_shoulder_control_motors_stopped:\n                Lift.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_left_shoulder_control_motors_stopped = True\n            # check the buttonRUp/buttonRDown status\n            # to control Intake\n            if controller.buttonRUp.pressing():\n                Intake.spin(FORWARD)\n                controller_right_shoulder_control_motors_stopped = False\n            elif controller.buttonRDown.pressing():\n                Intake.spin(REVERSE)\n                controller_right_shoulder_control_motors_stopped = False\n            elif not controller_right_shoulder_control_motors_stopped:\n                Intake.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_right_shoulder_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller = Thread(rc_auto_loop_function_controller)\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n# \tAuthor:       VEX\n# \tCreated:\n# \tDescription:  VEXcode IQ Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n# Variables\nLiftStateUp = False\nLiftStateDown = False\nLiftRotation = 0\nliftSpeed = 60\nLift.set_velocity(liftSpeed, PERCENT)\n\n\ndef LiftStop():\n    Lift.stop()\n\ndef LiftDown():\n#    liftSpeed\n#    LiftStateDown\n#    if not LiftStateDown:\n    Lift.spin(FORWARD)\n    while not BottomBumper.pressing():\n        AutoRedo.set_color(Color.PURPLE)\n        \n#        while (controller.buttonLDown.pressing()):\n\n    wait(20,SECONDS)\n    Lift.stop()   \n\n\n#    if LiftState == False:\n#        LiftState = True\n#        brain.play_sound(SoundType.ALARM)\n#        print(\"Lift going down!\")\n#        LiftRotation = 0\n#        print(LiftRotation)\n#        while not BottomBumper.pressing():\n#            print(\"Rotation \" + LiftRotation)\n#            Lift.spin_for(FORWARD, 1, TURNS)\n#            LiftRotation = LiftRotation + 1\n#        print(\"Bottom Bumper Pressed\")\n#        Lift.stop()\n#        LiftState = False\n# \ndef LiftUp():\n#    global liftSpeed\n#    LiftStateUp\n    brain.screen.print(LiftStateUp)\n    brain.screen.next_row()\n#    if LiftStateUp == False:\n    Lift.spin(REVERSE)\n    while not TopBumper.pressing():\n        AutoRedo.set_color(Color.PURPLE)\n#        while(controller.buttonLUp.pressing()):\n\n    wait(20,SECONDS)\n    Lift.stop()\n\n\n\n#    if LiftState == False:\n#        LiftState = True\n#        brain.play_sound(SoundType.SIREN)\n#        print(\"Lift going up!\")\n#        LiftRotation = 0\n#        print(LiftRotation)\n#        while not TopBumper.pressing():\n#            print(\"Rotation \" + LiftRotation)\n#            Lift.spin_for(REVERSE, 1, TURNS)\n#            LiftRotation = LiftRotation + 1\n#        print(\"Top Bumper Pressed\")\n#        Lift.stop()\n#        LiftState = False\n\ncontroller.buttonLUp.pressed(LiftUp)\ncontroller.buttonLDown.pressed(LiftDown)\ncontroller.buttonLUp.released(LiftStop)\ncontroller.buttonLDown.released(LiftStop)\n\ndef IntakeSpinFw():\n    Intake.spin(FORWARD)\n\ndef IntakeSpinRev():\n    Intake.spin(REVERSE)\n\ndef IntakeStop():\n    Intake.stop()\n\ncontroller.buttonRUp.pressed(IntakeSpinFw)\ncontroller.buttonRDown.pressed(IntakeSpinRev)\ncontroller.buttonRUp.released(IntakeStop)\ncontroller.buttonRDown.released(IntakeStop)\n\ndef bottombumperpressed():\n    global LiftStateDown\n    LiftStateDown = True\n    Autonomous.set_color(Color.RED)\n    brain.screen.print(\"Bottom pressed\")\n    brain.screen.next_row()\n    brain.screen.print(LiftStateDown)\n    brain.screen.next_row()   \n    Lift.stop()\n\ndef bottombumperreleased():\n    global LiftStateDown\n    LiftStateDown = False\n    Autonomous.set_color(Color.ORANGE)\n    brain.screen.print(\"Bottom released\")\n    brain.screen.next_row()\n    brain.screen.print(LiftStateDown)\n    brain.screen.next_row()   \n\n\ndef topbumperpressed():\n    global LiftStateUp\n    Autonomous.set_color(Color.GREEN)\n    brain.screen.print(\"Top pressed\")\n    LiftStateUp = True\n    brain.screen.next_row()\n    brain.screen.print(LiftStateUp)\n    brain.screen.next_row()   \n    Lift.stop()\n\ndef topbumperreleased():\n    global LiftStateUp\n    LiftStateUp = False\n    Autonomous.set_color(Color.ORANGE)\n    brain.screen.print(\"Top released\")\n    brain.screen.next_row()\n    brain.screen.print(LiftStateUp)\n    brain.screen.next_row()   \n\n\nBottomBumper.pressed(bottombumperpressed)\nBottomBumper.released(bottombumperreleased)\nTopBumper.pressed(topbumperpressed)\nTopBumper.released(topbumperreleased)\n\ncalibrate_drivetrain()\nIntake.set_velocity(100, PERCENT)\ndrivetrain.set_turn_velocity(85, PERCENT)\ndrivetrain.set_stopping(COAST)\nLift.set_stopping(HOLD)\nAutonomous.set_brightness(100)\nAutonomous.set_color(Color.BLUE)\nAutoRedo.set_color(Color.BLUE_GREEN)\nwait(15, MSEC)","textLanguage":"python","rconfig":[{"port":[1,2,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"integrated","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[10,11],"name":"Lift","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[],"name":"controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"Lift","leftDir":"false","right":"Intake","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"split"},"triportSourcePort":22},{"port":[8],"name":"BottomBumper","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[9],"name":"TopBumper","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[3,4],"name":"Intake","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[7],"name":"Autonomous","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[5],"name":"AutoRedo","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22}],"slot":5,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}