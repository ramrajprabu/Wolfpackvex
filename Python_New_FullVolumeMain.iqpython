{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nleft_drive_smart = Motor(Ports.PORT5, 1.0, False)\nright_drive_smart = Motor(Ports.PORT8, 1.0, True)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 200, 173, 76, MM, 1)\nLift_motor_a = Motor(Ports.PORT1, False)\nLift_motor_b = Motor(Ports.PORT2, True)\nLift = MotorGroup(Lift_motor_a, Lift_motor_b)\ncontroller = Controller()\nBottomBumper = Bumper(Ports.PORT6)\nTopBumper = Bumper(Ports.PORT7)\n\n\n\n# Make random actually random\ndef setRandomSeedUsingAccel():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    urandom.seed(int(xaxis + yaxis + zaxis))\n    \n# Set random seed \nsetRandomSeedUsingAccel()\n\n\n\n# define variables used for controlling motors based on controller inputs\ncontroller_left_shoulder_control_motors_stopped = True\ndrivetrain_needs_to_be_stopped_controller = False\n\n# define a task that will handle monitoring inputs from controller\ndef rc_auto_loop_function_controller():\n    global drivetrain_needs_to_be_stopped_controller, controller_left_shoulder_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axisD + axisC\n            # right = axisD - axisC\n            drivetrain_left_side_speed = controller.axisD.position() + controller.axisC.position()\n            drivetrain_right_side_speed = controller.axisD.position() - controller.axisC.position()\n            \n            # check if the values are inside of the deadband range\n            if abs(drivetrain_left_side_speed) < 5 and abs(drivetrain_right_side_speed) < 5:\n                # check if the motors have already been stopped\n                if drivetrain_needs_to_be_stopped_controller:\n                    # stop the drive motors\n                    left_drive_smart.stop()\n                    right_drive_smart.stop()\n                    # tell the code that the motors have been stopped\n                    drivetrain_needs_to_be_stopped_controller = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the motors next\n                # time the input is in the deadband range\n                drivetrain_needs_to_be_stopped_controller = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n            # check the buttonLUp/buttonLDown status\n            # to control Lift\n            if controller.buttonLUp.pressing():\n                Lift.spin(FORWARD)\n                controller_left_shoulder_control_motors_stopped = False\n            elif controller.buttonLDown.pressing():\n                Lift.spin(REVERSE)\n                controller_left_shoulder_control_motors_stopped = False\n            elif not controller_left_shoulder_control_motors_stopped:\n                Lift.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_left_shoulder_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller = Thread(rc_auto_loop_function_controller)\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n# \tAuthor:       VEX\n# \tCreated:\n# \tDescription:  VEXcode IQ Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n# Variables\nLiftState = False\nLiftRotation = 0\n\n\ndef LiftDown(speed):\n    Lift.set_velocity(speed, PERCENT)\n    if LiftState == False:\n        LiftState = True\n        brain.play_sound(SoundType.ALARM)\n        print(\"Lift going down!\")\n        LiftRotation = 0\n        print(LiftRotation)\n        while not BottomBumper.pressing():\n            print(\"Rotation \" + LiftRotation)\n            Lift.spin_for(FORWARD, 1, TURNS)\n            LiftRotation = LiftRotation + 1\n        print(\"Bottom Bumper Pressed\")\n        Lift.stop()\n        LiftState = False\n\ndef LiftUp(speed):\n    Lift.set_velocity(speed, PERCENT)\n    if LiftState == False:\n        LiftState = True\n        brain.play_sound(SoundType.SIREN)\n        print(\"Lift going up!\")\n        LiftRotation = 0\n        print(LiftRotation)\n        while not TopBumper.pressing():\n            print(\"Rotation \" + LiftRotation)\n            Lift.spin_for(REVERSE, 1, TURNS)\n            LiftRotation = LiftRotation + 1\n        print(\"Top Bumper Pressed\")\n        Lift.stop()\n        LiftState = False\n\ncontroller.buttonLUp.pressed(LiftUp(100))\ncontroller.buttonLDown.pressed(LiftDown(100))","textLanguage":"python","rconfig":[{"port":[5,8,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"}},{"port":[1,2],"name":"Lift","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"}},{"port":[],"name":"controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"Lift","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"arcader"}},{"port":[6],"name":"BottomBumper","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{}},{"port":[7],"name":"TopBumper","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{}}],"slot":4,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}