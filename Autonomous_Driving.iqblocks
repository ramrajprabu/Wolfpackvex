{"mode":"Blocks","workspace":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"_2.^beQjx|FGt38A,8(E\">myVariable</variable><variable id=\"W*7V?A;){[jqCr{00-hl\">LiftRotation</variable></variables><block type=\"iq_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"-10\"></block><block type=\"procedures_definition\" id=\"p_kAI7ery*kjn3yy#y_}\" x=\"1090\" y=\"150\"><statement name=\"custom_block\"><shadow type=\"procedures_prototype\" id=\"PLCXQ@[_{J?L/.[_6F-5\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" proccode=\"Lift up\" proceduredefid=\"PLCXQ@[_{J?L/.[_6F-5\" argumentids=\"[]\" argumentnames=\"[]\" argumentdefaults=\"[]\" argumenttypes=\"[]\" warp=\"false\"></mutation></shadow></statement><next><block type=\"iq_variables_set_variable\" id=\")^ZVF;R{~qx?g(w#cOj%\"><field name=\"VARIABLE\" id=\"W*7V?A;){[jqCr{00-hl\">LiftRotation</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"W:^AOj+LIOEtLB:=yd%J\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"iq_looks_print_new\" id=\"hq(Q^`=D~Hq5uFGAZSDu\"><field name=\"TARGET\">Console</field><field name=\"andsetcursortonextrow_mutator\">true</field><value name=\"DATA\"><shadow type=\"text\" id=\"KHaq0LwaIBauT4j)^f9$\"><field name=\"TEXT\">Lift going up</field></shadow></value><next><block type=\"iq_control_repeat_until\" id=\"uq}{{syGqNE9q%R!aFCX\"><value name=\"CONDITION\"><block type=\"iq_sensing_pressing_bumper\" id=\"1$]cJk:]v7H,QD|tOKlm\"><field name=\"BUMPER\">TopBumper</field></block></value><statement name=\"SUBSTACK\"><block type=\"iq_looks_print_new\" id=\"WP)VOvNu;pSnRq`PWhL~\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow type=\"text\" id=\",09v,(*y$8`BQ)L-/4OG\"><field name=\"TEXT\">Rotation </field></shadow></value><next><block type=\"iq_looks_print_new\" id=\"Pl/R)d:h/npo|ff7nf$r\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">true</field><value name=\"DATA\"><shadow type=\"text\" id=\"jS9w1=*7{@r#BylS33gF\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"iq_variables_variable\" id=\"cs(fPeDp6x%G*f(vCK)_\"><field name=\"VARIABLE\" id=\"W*7V?A;){[jqCr{00-hl\">LiftRotation</field></block></value><next><block type=\"iq_motion_spin_for\" id=\"[y4$)+!cc8skyI;my~H%\"><field name=\"MOTOR\">Lift</field><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">rev</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"*j~9KrKzaHN#uaf=Ppsd\"><field name=\"NUM\">1</field></shadow></value></block></next></block></next></block></statement></block></next></block></next></block></next></block></xml>","rconfig":[{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"}},{"port":[1,2,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"}},{"port":[3,4],"name":"Lift","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"}},{"port":[10,11],"name":"Intake","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"}},{"port":[9],"name":"BottomBumper","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{}},{"port":[8],"name":"TopBumper","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{}},{"port":[6],"name":"Autonomous","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{}}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"downloadLanguage":"python","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\ncontroller Controller = controller();\nmotor LeftDriveSmart = motor(PORT1, 1, false);\nmotor RightDriveSmart = motor(PORT2, 1, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 200, 173, 76, mm, 1);\nmotor LiftMotorA = motor(PORT3, false);\nmotor LiftMotorB = motor(PORT4, true);\nmotor_group Lift = motor_group(LiftMotorA, LiftMotorB);\n\nmotor IntakeMotorA = motor(PORT10, false);\nmotor IntakeMotorB = motor(PORT11, true);\nmotor_group Intake = motor_group(IntakeMotorA, IntakeMotorB);\n\nbumper BottomBumper = bumper(PORT9);\nbumper TopBumper = bumper(PORT8);\ntouchled Autonomous = touchled(PORT6);\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// User defined function\nvoid myblockfunction_Lift_up();\n\nint Brain_precision = 0, Console_precision = 0;\n\nfloat myVariable, LiftRotation;\n\n// Used to find the format string for printing numbers with the\n// desired number of decimal places\nconst char* printToBrain_numberFormat() {\n  // look at the current precision setting to find the format string\n  switch(Brain_precision){\n    case 0:  return \"%.0f\"; // 0 decimal places (1)\n    case 1:  return \"%.1f\"; // 1 decimal place  (0.1)\n    case 2:  return \"%.2f\"; // 2 decimal places (0.01)\n    case 3:  return \"%.3f\"; // 3 decimal places (0.001)\n    default: return \"%f\"; // use the print system default for everthing else\n  }\n}\n\n// User defined function\nvoid myblockfunction_Lift_up() {\n  LiftRotation = 0.0;\n  printf(\"Lift going up\");\n  printf(\"\\n\");\n  while (!TopBumper.pressing()) {\n    Brain.Screen.print(\"Rotation \");\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(LiftRotation));\n    Brain.Screen.newLine();\n    Lift.spinFor(forward, 1.0, turns, true);\n  wait(20, msec);\n  }\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  return 0;\n}\n\n\nint main() {\n  whenStarted1();\n}","target":"Physical"}