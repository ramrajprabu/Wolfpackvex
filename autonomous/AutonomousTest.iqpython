{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nleft_drive_smart = Motor(Ports.PORT5, 1.0, False)\nright_drive_smart = Motor(Ports.PORT11, 1.0, True)\n\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, brain_inertial, 200)\nAutonomous = Touchled(Ports.PORT8)\nLift_motor_a = Motor(Ports.PORT10, False)\nLift_motor_b = Motor(Ports.PORT4, True)\nLift = MotorGroup(Lift_motor_a, Lift_motor_b)\nIntake_motor_a = Motor(Ports.PORT6, False)\nIntake_motor_b = Motor(Ports.PORT12, True)\nIntake = MotorGroup(Intake_motor_a, Intake_motor_b)\nAutoRedo = Touchled(Ports.PORT2)\nBottomBumper = Bumper(Ports.PORT9)\n\n\n\n# Make random actually random\ndef setRandomSeedUsingAccel():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    urandom.seed(int(xaxis + yaxis + zaxis))\n    \n# Set random seed \nsetRandomSeedUsingAccel()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    brain_inertial.calibrate()\n    while brain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      Autonomous\n# \tAuthor:       Team WolfPack\n# \tCreated:      January 20th, 2024\n# \tDescription:  VEXcode IQ Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Variables\nAutoSection = 0\nIfDriving = False\nsection = 1\n\n# Setup\n    # Calibration\ncalibrate_drivetrain()\nbrain_inertial.calibrate()\n    # Set TouchLED colors\nAutonomous.set_color(Color.RED)\nAutoRedo.set_color(Color.PURPLE)\n    # Set stopping and motor/drivetrain velocities\ndrivetrain.set_stopping(BRAKE)\ndrivetrain.set_drive_velocity(100, PERCENT)\ndrivetrain.set_turn_velocity(50, PERCENT)\nIntake.set_velocity(100, PERCENT)\n    # Bring lift to bottom\nLift.set_position(0, DEGREES)\nwhile not BottomBumper.pressing():\n    Lift.spin(FORWARD)\nLift.stop()\n    # Bring lift to middle position and set variable\nLift.spin_for(REVERSE, 7, TURNS)\nmidlift = Lift.position(DEGREES)\n\n# Autonomous Function\ndef run():\n    global AutoSection\n    global IfDriving\n    if AutoSection == 0:\n        if not IfDriving:\n            IfDriving = True\n            AutoSection = 1\n            drivetrain.drive_for(FORWARD, 300, MM)\n            drivetrain.turn_to_heading(75, DEGREES)\n            drivetrain.turn_to_heading(0, DEGREES)\n            drivetrain.drive_for(FORWARD, 575, MM)\n            drivetrain.turn_to_heading(90, DEGREES)\n            drivetrain.drive_for(FORWARD, 550, MM)\n            drivetrain.turn_to_heading(35, DEGREES)\n            drivetrain.turn_to_heading(50, DEGREES)\n            drivetrain.drive_for(FORWARD, 650, MM)\n            drivetrain.turn_to_heading(90, DEGREES)\n            drivetrain.drive_for(FORWARD, 75, MM)\n            IfDriving = False\ndef redo():\n    global AutoSection\n    global IfDriving\n    IfDriving = False\n    drivetrain.stop()\n    Lift.stop()\n    Intake.stop()\n    if AutoSection >= 0:\n        AutoSection = AutoSection - 1\n        Autonomous.set_color(Color.RED)\n    else:\n        AutoSection = 2\ndef dumpPurple():\n    global midlift\n    Lift.spin_to_position(midlift, DEGREES)\n    Lift.spin_for(FORWARD, 7, TURNS)\n    wait(1, SECONDS)\n    Lift.spin_to_position(midlift, DEGREES)\ndef dumpGreen():\n    global midlift\n    Lift.spin_to_position(midlift, DEGREES)\n    Lift.spin_for(REVERSE, 9, TURNS)\n    wait(1, SECONDS)\n    Lift.spin_to_position(midlift, DEGREES)\ndef testIntake():\n    drivetrain.set_heading(0, DEGREES)\n    drivetrain.turn_to_heading(315, DEGREES)\n    drivetrain.set_drive_velocity(50, PERCENT)\n    drivetrain.drive_for(FORWARD, 425, MM)\n    Intake.spin(FORWARD)\n    drivetrain.turn_to_heading(0, DEGREES)\n    drivetrain.drive_for(FORWARD, 550, MM)\n    Intake.stop()\ndef 66pt():\n    # Start in position B\n    # Start Segment 1\n        # OBJECTIVE: Knock over 1st red block and score 4 green blocks in \n        # goal next to starting position\n        # +5 for red block; +4 for green blocks; +10 color bonus (19 points in all)\n    drivetrain.set_heading(0, DEGREES)\n    drivetrain.set_drive_velocity(50, PERCENT)\n    drivetrain.drive_for(FORWARD, 300, MM)\n    drivetrain.turn_to_heading(270, DEGREES)\n    drivetrain.drive_for(REVERSE, 50, MM)\n    drivetrain.drive_for(FORWARD, 350, MM)\n    drivetrain.turn_to_heading(0, DEGREES)\n    Intake.spin(FORWARD)\n    drivetrain.drive_for(FORWARD, 500, MM)\n    wait(500, MSEC)\n    drivetrain.drive_for(REVERSE, 500, MM)\n    drivetrain.turn_to_heading(90, DEGREES)\n    drivetrain.drive_for(REVERSE, 200, MM)\n    dumpGreen()\n    # Start Segment 2\n        # OBJECTIVE: Knock over other two red blocks and score 4 purple blocks \n        # in goal nearest to previously scored\n        # +10 for red blocks; +4 for purple blocks; +10 color bonus (24 points in all)\n    drivetrain.drive_for(FORWARD, 200, MM)\n    drivetrain.turn_to_heading(0, DEGREES)\n    drivetrain.drive_for(FORWARD, 300, MM)\n    drivetrain.turn_to_heading(90, DEGREES)\n    drivetrain.drive_for(FORWARD, 300, MM)\n    Intake.spin(FORWARD)\n    drivetrain.turn_to_heading(135, DEGREES)\n    drivetrain.drive_for(FORWARD, 424, MM)\n    drivetrain.turn_to_heading(0, DEGREES)\n    drivetrain.turn_to_heading(45, DEGREES)\n    drivetrain.drive_for(FORWARD, 424, MM)\n    drivetrain.turn_to_heading(0, DEGREES)\n    Intake.stop()\n    drivetrain.turn_to_heading(325, DEGREES)\n    drivetrain.drive_for(FORWARD, 250, MM)\n    drivetrain.turn_to_heading(270, DEGREES)\n    Intake.spin(FORWARD)\n    drivetrain.drive_for(FORWARD, 450, MM)\n    drivetrain.turn_to_heading(0, DEGREES)\n    drivetrain.drive_for(FORWARD, 300, MM)\n    drivetrain.turn_to_heading(90, DEGREES)\n    drivetrain.drive_for(REVERSE, 800, MM)\n    dumpPurple()\n    # Start Segment 3\n    # OBJECTIVE: Score 4 green blocks\n    # +4 for green blocks; +10 color bonus; +10 fill level bonus (24 points in all)\n    drivetrain.drive_for(REVERSE, 1200, MM)\n    drivetrain.turn_to_heading(180, DEGREES)\n    Intake.spin(FORWARD)\n    drivetrain.drive_for(FORWARD, 1300, MM)\n    drivetrain.turn_to_heading(270, DEGREES)\n    drivetrain.drive_for(REVERSE, 300, MM)\n    dumpGreen()\n    # Start Segment 3.5\n    # OBJECTIVE: Partial park\n    # +5 for partial park\n    drivetrain.drive_for(FORWARD, 150, MM)\n    drivetrain.turn_to_heading(0, DEGREES)\n    drivetrain.drive_for(FORWARD, 300, MM)\n    drivetrain.turn_to_heading(90, DEGREES)\n    drivetrain.drive_for(FORWARD, 200, MM)\n    drivetrain.turn_to_heading(0, DEGREES)\n    drivetrain.drive_for(FORWARD, 500, MM)\ndef seg1():\n    # Start Segment 1\n        # OBJECTIVE: Knock over 1st red block and score 4 green blocks in \n        # goal next to starting position\n        # +5 for red block; +4 for green blocks; +10 color bonus (19 points in all)\n    drivetrain.set_heading(0, DEGREES)\n    drivetrain.set_drive_velocity(50, PERCENT)\n    drivetrain.drive_for(FORWARD, 300, MM)\n    drivetrain.turn_to_heading(270, DEGREES)\n    drivetrain.drive_for(REVERSE, 50, MM)\n    drivetrain.drive_for(FORWARD, 350, MM)\n    drivetrain.turn_to_heading(0, DEGREES)\n    Intake.spin(FORWARD)\n    drivetrain.drive_for(FORWARD, 500, MM)\n    wait(500, MSEC)\n    drivetrain.drive_for(REVERSE, 500, MM)\n    drivetrain.turn_to_heading(90, DEGREES)\n    drivetrain.drive_for(REVERSE, 200, MM)\n    dumpGreen()\n    global section\n    section = 2\ndef seg2():\n    # Start Segment 2\n        # OBJECTIVE: Knock over other two red blocks and score 4 purple blocks \n        # in goal nearest to previously scored\n        # +10 for red blocks; +4 for purple blocks; +10 color bonus (24 points in all)\n    drivetrain.drive_for(FORWARD, 200, MM)\n    drivetrain.turn_to_heading(0, DEGREES)\n    drivetrain.drive_for(FORWARD, 300, MM)\n    drivetrain.turn_to_heading(90, DEGREES)\n    drivetrain.drive_for(FORWARD, 300, MM)\n    Intake.spin(FORWARD)\n    drivetrain.turn_to_heading(135, DEGREES)\n    drivetrain.drive_for(FORWARD, 424, MM)\n    drivetrain.turn_to_heading(0, DEGREES)\n    drivetrain.turn_to_heading(45, DEGREES)\n    drivetrain.drive_for(FORWARD, 424, MM)\n    drivetrain.turn_to_heading(0, DEGREES)\n    Intake.stop()\n    drivetrain.turn_to_heading(325, DEGREES)\n    drivetrain.drive_for(FORWARD, 250, MM)\n    drivetrain.turn_to_heading(270, DEGREES)\n    Intake.spin(FORWARD)\n    drivetrain.drive_for(FORWARD, 450, MM)\n    drivetrain.turn_to_heading(0, DEGREES)\n    drivetrain.drive_for(FORWARD, 300, MM)\n    drivetrain.turn_to_heading(90, DEGREES)\n    drivetrain.drive_for(REVERSE, 800, MM)\n    dumpPurple()\n    global section\n    section = 3\ndef seg3():\n    # Start Segment 3\n    # OBJECTIVE: Score 4 green blocks\n    # +4 for green blocks; +10 color bonus; +10 fill level bonus (24 points in all)\n    drivetrain.drive_for(REVERSE, 1200, MM)\n    drivetrain.turn_to_heading(180, DEGREES)\n    Intake.spin(FORWARD)\n    drivetrain.drive_for(FORWARD, 1300, MM)\n    drivetrain.turn_to_heading(270, DEGREES)\n    drivetrain.drive_for(REVERSE, 300, MM)\n    dumpGreen()\n    global section\n    section = 4\ndef seg4():\n    # Start Segment 3.5\n    # OBJECTIVE: Partial park\n    # +5 for partial park\n    drivetrain.drive_for(FORWARD, 150, MM)\n    drivetrain.turn_to_heading(0, DEGREES)\n    drivetrain.drive_for(FORWARD, 300, MM)\n    drivetrain.turn_to_heading(90, DEGREES)\n    drivetrain.drive_for(FORWARD, 200, MM)\n    drivetrain.turn_to_heading(0, DEGREES)\n    drivetrain.drive_for(FORWARD, 500, MM)\ndef manage():\n    global section\n    if section == 1:\n        seg1()\n    elif section == 2:\n        seg2()\n    elif section == 3:\n        seg3()\n    elif section == 4:\n        seg4()\n    else:\n        Autonomous.set_color(Color.WHITE)\n\n\n# -16 (up) lift turns from purple dump to green dump\n# -9 (up) lift turns from middle to green dump\n# 7 (down) lift turns from middle to purple dump\n# Run autonomous\n\n\n# Autonomous.pressed(run)\nAutonomous.pressed(manage)\nAutoRedo.pressed(redo)","textLanguage":"python","rconfig":[{"port":[5,11,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"integrated","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[8],"name":"Autonomous","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[10,4],"name":"Lift","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[6,12],"name":"Intake","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[2],"name":"AutoRedo","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[9],"name":"BottomBumper","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22}],"slot":1,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}