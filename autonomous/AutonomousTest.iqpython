{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nleft_drive_smart = Motor(Ports.PORT5, 1.0, False)\nright_drive_smart = Motor(Ports.PORT11, 1.0, True)\n\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, brain_inertial, 200)\nAutonomous = Touchled(Ports.PORT8)\nLift_motor_a = Motor(Ports.PORT10, False)\nLift_motor_b = Motor(Ports.PORT4, True)\nLift = MotorGroup(Lift_motor_a, Lift_motor_b)\nIntake_motor_a = Motor(Ports.PORT6, False)\nIntake_motor_b = Motor(Ports.PORT12, True)\nIntake = MotorGroup(Intake_motor_a, Intake_motor_b)\nAutoRedo = Touchled(Ports.PORT2)\nBottomBumper = Bumper(Ports.PORT9)\n\n\n\n# Make random actually random\ndef setRandomSeedUsingAccel():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    urandom.seed(int(xaxis + yaxis + zaxis))\n    \n# Set random seed \nsetRandomSeedUsingAccel()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    brain_inertial.calibrate()\n    while brain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      Autonomous\n# \tAuthor:       Team WolfPack\n# \tCreated:      January 20th, 2024\n# \tDescription:  VEXcode IQ Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\nimport math\n\n# Variables\nAutoSection = 0\nIfDriving = False\nsection = 1\ncurrentX = 450\ncurrentY = 450\ndebug = True\nGoal1 = [150, 1650]\nGoal2 = [150, 150]\nGoal3 = [2250, 150]\nFlower1 = [150, 750]\nFlower2 = [750, 1650]\nFlower3 = [1350, 1650]\nFlower4 = [1950, 750]\nGreenLine1 = [450, 450]\nGreenLine2 = [1650, 450]\nCenter = [1050, 1050]\nRed1 = [750, 1350]\nRed2 = [1350, 1350]\nRed3 = [1050, 450]\nSupplyZone1 = [1950, 1350]\nSupplyZone2 = [2250, 1050]\n\n# Setup\n    # Calibration\ncalibrate_drivetrain()\nbrain_inertial.calibrate()\n    # Set TouchLED colors\nAutonomous.set_color(Color.RED)\nAutoRedo.set_color(Color.PURPLE)\n    # Set stopping and motor/drivetrain velocities\ndrivetrain.set_stopping(BRAKE)\ndrivetrain.set_drive_velocity(100, PERCENT)\ndrivetrain.set_turn_velocity(50, PERCENT)\nIntake.set_velocity(100, PERCENT)\n    # Bring lift to bottom\nwhile not BottomBumper.pressing():\n    Lift.spin(FORWARD)\nLift.stop()\nLift.set_position(0, DEGREES)\n    # 1100 from purple to green dump\n    # Bring lift to middle position and set variable\nLift.spin_for(REVERSE, 140, DEGREES)\nmidlift = Lift.position(DEGREES)\n\n# Autonomous Function\ndef goto(mode, fw, x, y):\n    global currentX\n    global currentY\n    global debug\n    errorX = x - currentX\n    errorY = y - currentY\n    if mode == 1:\n        # Diagonally\n        abserY = abs(errorY)\n        abserX = abs(errorX)\n        hypotenuse = math.sqrt(abserY**2 + abserX**2)\n        turnto = math.degrees(math.asin(abserX/hypotenuse))\n        if debug:\n            print(\"errorX: \"+errorX)\n            print(\"errorY: \"+errorY)\n            print(\"absolute value errorX: \" + abserX)\n            print(\"absolute value errorY: \" + abserY)\n            print(\"hypotenuse: \" + hypotenuse)\n            print(\"turnto: \" + turnto)\n        if fw:\n            if errorX > 0 and errorY > 0:\n                # errorX & errorY positive: turn to heading y alpha\n                drivetrain.turn_to_heading(turnto, DEGREES)\n                if debug:\n                    print(\"Turned to \" + turnto + \" degrees\")\n            elif errorX < 0 and errorY < 0:\n                # errorX & errorY negative: 180 + y alpha\n                drivetrain.turn_to_heading(180 + turnto, DEGREES)\n                if debug:\n                    print(\"Turned to \" + (180 + turnto) + \" degrees\")\n            elif errorX < 0 and errorY > 0:\n                # errorX positive & errorY negative: 360 - y alpha\n                drivetrain.turn_to_heading(360 - turnto, DEGREES)\n                if debug:\n                    print(\"Turned to \" + (360 - turnto) + \" degrees\")\n            else:\n                # errorX negative & errorY positive: 90 + x alpha\n                drivetrain.turn_to_heading(90 + (90 - turnto), DEGREES)\n                if debug:\n                    print(\"Turned to \" + (90 + (90 - turnto)) + \" degrees\")\n            drivetrain.drive_for(FORWARD, hypotenuse, MM)\n            if debug:\n                print(\"Drove for \" + hypotenuse + \" millimeters\")\n        else:\n            print(turnto)\n            if errorX > 0 and errorY > 0:\n                # errorX & errorY positive: turn to heading y alpha\n                turnto = turnto + 180\n                drivetrain.turn_to_heading(turnto, DEGREES)\n            elif errorX < 0 and errorY < 0:\n                # errorX & errorY negative: 180 + y alpha\n                turnto = turnto + 180\n                drivetrain.turn_to_heading(180 + turnto, DEGREES)\n            elif errorX < 0 and errorY > 0:\n                turnto = turnto + 180\n                # errorX positive & errorY negative: 360 - y alpha\n                drivetrain.turn_to_heading(360 - turnto, DEGREES)\n            else:\n                turnto = turnto + 180\n                # errorX negative & errorY positive: 90 + x alpha\n                drivetrain.turn_to_heading(90 + (90 - turnto), DEGREES)\n            drivetrain.drive_for(REVERSE, hypotenuse, MM)\n    elif mode == 2:\n        # Step (x, y)\n        if x > currentX and fw:\n            drivetrain.turn_to_heading(90, DEGREES)\n            drivetrain.drive_for(FORWARD, abs(errorX), MM)\n        else:\n            drivetrain.turn_to_heading(270, DEGREES)\n            if fw:\n                drivetrain.drive_for(FORWARD, abs(errorX), MM)\n            else:\n                drivetrain.drive_for(REVERSE, abs(errorX), MM)\n        if y > currentY and fw:\n            drivetrain.turn_to_heading(0, DEGREES)\n            drivetrain.drive_for(FORWARD, abs(errorY), MM)\n        else:\n            drivetrain.turn_to_heading(180, DEGREES)\n            if fw:\n                drivetrain.drive_for(FORWARD, abs(errorY), MM)\n            else:\n                drivetrain.drive_for(REVERSE, abs(errorY), MM)\n    elif mode == 3:\n        # Step (y, x)\n        if y > currentY and fw:\n            drivetrain.turn_to_heading(0, DEGREES)\n            drivetrain.drive_for(FORWARD, abs(errorY), MM)\n        else:\n            drivetrain.turn_to_heading(180, DEGREES)\n            if fw:\n                drivetrain.drive_for(FORWARD, abs(errorY), MM)\n            else:\n                drivetrain.drive_for(REVERSE, abs(errorY), MM)\n        if x > currentX and fw:\n            drivetrain.turn_to_heading(90, DEGREES)\n            drivetrain.drive_for(FORWARD, abs(errorX), MM)\n        else:\n            drivetrain.turn_to_heading(270, DEGREES)\n            if fw:\n                drivetrain.drive_for(FORWARD, abs(errorX), MM)\n            else:\n                drivetrain.drive_for(REVERSE, abs(errorX), MM)\n    elif mode == 4:\n        # One axis\n        if errorX == 0:\n            # Travel along Y axis\n            if y > currentY and fw:\n                drivetrain.turn_to_heading(0, DEGREES)\n                drivetrain.drive_for(FORWARD, abs(errorY), MM)\n            else:\n                drivetrain.turn_to_heading(180, DEGREES)\n                if fw:\n                    drivetrain.drive_for(FORWARD, abs(errorY), MM)\n                else:\n                    drivetrain.drive_for(REVERSE, abs(errorY), MM)\n        elif errorY == 0:\n            if x > currentX and fw:\n                drivetrain.turn_to_heading(90, DEGREES)\n                drivetrain.drive_for(FORWARD, abs(errorX), MM)\n            else:\n                drivetrain.turn_to_heading(270, DEGREES)\n                if fw:\n                    drivetrain.drive_for(FORWARD, abs(errorX), MM)\n                else:\n                    drivetrain.drive_for(REVERSE, abs(errorX), MM)\n        else:\n            goto(2, fw, x, y)\n            print(\"2 axes changed\")\n    else:\n        brain.screen.print(\"Error\")\n    currentX = x\n    currentY = y\n\n\ndef run():\n    global AutoSection\n    global IfDriving\n    if AutoSection == 0:\n        if not IfDriving:\n            IfDriving = True\n            AutoSection = 1\n            drivetrain.drive_for(FORWARD, 300, MM)\n            drivetrain.turn_to_heading(75, DEGREES)\n            drivetrain.turn_to_heading(0, DEGREES)\n            drivetrain.drive_for(FORWARD, 575, MM)\n            drivetrain.turn_to_heading(90, DEGREES)\n            drivetrain.drive_for(FORWARD, 550, MM)\n            drivetrain.turn_to_heading(35, DEGREES)\n            drivetrain.turn_to_heading(50, DEGREES)\n            drivetrain.drive_for(FORWARD, 650, MM)\n            drivetrain.turn_to_heading(90, DEGREES)\n            drivetrain.drive_for(FORWARD, 75, MM)\n            IfDriving = False\ndef redo():\n    global AutoSection\n    global IfDriving\n    IfDriving = False\n    drivetrain.stop()\n    Lift.stop()\n    Intake.stop()\n    if AutoSection >= 0:\n        AutoSection = AutoSection - 1\n        Autonomous.set_color(Color.RED)\n    else:\n        AutoSection = 2\ndef dumpPurple():\n    global midlift\n    Lift.spin_to_position(midlift, DEGREES)\n    Lift.spin_for(FORWARD, 140, DEGREES)\n    wait(2, SECONDS)\n    Lift.spin_to_position(midlift, DEGREES)\ndef dumpGreen():\n    global midlift\n    Lift.spin_to_position(midlift, DEGREES)\n    # Original position for dumping green - rotate forward for 985 degrees\n    # Feb 1 position for dumping green - 1090 (original + 105)\n    # Feb 3 position for dumping green - \n    Lift.spin_for(REVERSE, 1090, DEGREES)\n    wait(2, SECONDS)\n    Lift.spin_to_position(midlift, DEGREES)\ndef seg1():\n    # Start Segment 1\n        # OBJECTIVE: Knock over 1st red block and score 4 green blocks in \n        # goal next to starting position\n        # +5 for red block; +4 for green blocks; +10 color bonus (19 points in all)\n    drivetrain.set_heading(0, DEGREES)\n    drivetrain.set_turn_velocity(50, PERCENT)\n    drivetrain.set_drive_velocity(50, PERCENT)\n    drivetrain.drive_for(FORWARD, 230, MM)\n    drivetrain.turn_to_heading(270, DEGREES)\n    drivetrain.drive_for(REVERSE, 50, MM)\n    drivetrain.drive_for(FORWARD, 215, MM)\n    Intake.spin(FORWARD)\n    drivetrain.drive_for(FORWARD, 115, MM)\n    drivetrain.turn_to_heading(0, DEGREES)\n    drivetrain.drive_for(FORWARD, 600, MM)\n    wait(500, MSEC)\n    drivetrain.drive_for(REVERSE, 775, MM)\n    drivetrain.turn_to_heading(75, DEGREES)\n    drivetrain.drive_for(REVERSE, 135, MM)\n    Intake.stop()\n    dumpGreen()\n    global section\n    section = 2\ndef seg2():\n    # Start Segment 2\n        # OBJECTIVE: Knock over other two red blocks and score 4 green blocks \n        # in goal nearest to previously scored\n        # +10 for red blocks; +4 for green blocks; +10 color bonus (24 points in all)\n    drivetrain.drive_for(FORWARD, 500, MM)\n    drivetrain.turn_to_heading(0, DEGREES)\n    drivetrain.drive_for(FORWARD, 300, MM)\n    drivetrain.turn_to_heading(45, DEGREES)\n    Intake.spin(FORWARD)\n    drivetrain.drive_for(FORWARD, 900, MM)\n    Intake.stop()\n    # Note: Segment incomplete\n    # dumpGreen()\n    global section\n    section = 3\ndef seg3():\n    # Start Segment 3\n    # OBJECTIVE: Score 4 green blocks\n    # +4 for green blocks; +10 color bonus; +10 fill level bonus (24 points in all)\n    drivetrain.drive_for(REVERSE, 1200, MM)\n    drivetrain.turn_to_heading(180, DEGREES)\n    Intake.spin(FORWARD)\n    drivetrain.drive_for(FORWARD, 1300, MM)\n    drivetrain.turn_to_heading(270, DEGREES)\n    drivetrain.drive_for(REVERSE, 300, MM)\n    dumpGreen()\n    global section\n    section = 4\ndef seg4():\n    # Start Segment 3.5\n    # OBJECTIVE: Partial park\n    # +5 for partial park\n    drivetrain.drive_for(FORWARD, 150, MM)\n    drivetrain.turn_to_heading(0, DEGREES)\n    drivetrain.drive_for(FORWARD, 300, MM)\n    drivetrain.turn_to_heading(90, DEGREES)\n    drivetrain.drive_for(FORWARD, 200, MM)\n    drivetrain.turn_to_heading(0, DEGREES)\n    drivetrain.drive_for(FORWARD, 500, MM)\ndef manage():\n    global section\n    if section == 1:\n        seg1()\n    elif section == 2:\n        seg2()\n    elif section == 3:\n        seg3()\n    elif section == 4:\n        seg4()\n    else:\n        Autonomous.set_color(Color.WHITE)\n\ndef runwgoto():\n    global section\n    global currentX\n    global currentY\n    global Red1\n    global Goal1\n    drivetrain.set_turn_velocity(50, PERCENT)\n    drivetrain.set_drive_velocity(50, PERCENT)\n    goto(4, True, 450, 680)\n    drivetrain.turn_to_heading(270, DEGREES)\n    drivetrain.drive_for(REVERSE, 50, MM)\n    currentX = currentX + 50\n    goto(4, True, currentX - 215, 680)\n    Intake.spin(FORWARD)\n    goto(2, True, currentX-115, currentY + 600)\n    wait(500, MSEC)\n    drivetrain.turn_to_heading(0)\n    drivetrain.drive_for(REVERSE, 775, MM)\n    currentY = currentY - 775\n    drivetrain.turn_to_heading(75, DEGREES)\n    Intake.stop()\n    drivetrain.drive_for(REVERSE, 45, MM)\n    dumpGreen()\n    #\n    Intake.spin(FORWARD)\n    goto(3, True, Red1[0] - 25, Red1[1])\n    goto(2, False, Goal1[0], Goal1[1] - 25)\ndef test():\n    drivetrain.drive_for(FORWARD, 200, MM)\ndef runnew():\n    drivetrain.set_drive_velocity(50, PERCENT)\n    drivetrain.set_turn_velocity(50, PERCENT)\n    Intake.spin(FORWARD)\n    goto(4, True, 450, 900)\n    goto(1, True, 1050, 1350)\n    Intake.stop()\n    goto(1, False, 200, 1600)\n    dumpGreen()\n    goto(1, True, 1000, 450)\n    # Intake.spin(FORWARD)\n    goto(1, True, 1050, 750)\n    goto(1, True, 1350, 1050)\n    goto(1, True, 1650, 900)\n    goto(4, True, 1350, 450)\n    # Intake.stop()\n    goto(1, False, 225, 150)\n    dumpPurple()\n    goto(4, False, 1950, 150)\n    dumpGreen()\n    goto(1, True, 1100, 1350)\n    goto(4, True, 1750, 1350)\n\n\n# Run autonomous\ndrivetrain.set_stopping(HOLD)\n# Autonomous.pressed(run)\ncalibrate_drivetrain()\ndrivetrain.set_heading(0, DEGREES)\nAutonomous.pressed(runnew)\nAutoRedo.pressed(redo)","textLanguage":"python","rconfig":[{"port":[5,11,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"integrated","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[8],"name":"Autonomous","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[10,4],"name":"Lift","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[6,12],"name":"Intake","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[2],"name":"AutoRedo","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[9],"name":"BottomBumper","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22}],"slot":2,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}