{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nleft_drive_smart = Motor(Ports.PORT1, 1.0, False)\nright_drive_smart = Motor(Ports.PORT2, 1.0, True)\n\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, brain_inertial, 200)\nAutonomous = Touchled(Ports.PORT6)\nAutonomousRedo = Touchled(Ports.PORT7)\nLift_motor_a = Motor(Ports.PORT3, False)\nLift_motor_b = Motor(Ports.PORT4, True)\nLift = MotorGroup(Lift_motor_a, Lift_motor_b)\nIntake_motor_a = Motor(Ports.PORT10, False)\nIntake_motor_b = Motor(Ports.PORT11, False)\nIntake = MotorGroup(Intake_motor_a, Intake_motor_b)\nBottomBumper = Bumper(Ports.PORT8)\nTopBumper = Bumper(Ports.PORT9)\n\n\n\n# Make random actually random\ndef setRandomSeedUsingAccel():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    urandom.seed(int(xaxis + yaxis + zaxis))\n    \n# Set random seed \nsetRandomSeedUsingAccel()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    brain_inertial.calibrate()\n    while brain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n# \tAuthor:       VEX\n# \tCreated:\n# \tDescription:  VEXcode IQ Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Variables\nAutoSection = 0\nAutonomous.set_color(Color.RED)\nAutonomousRedo.set_color(Color.PURPLE)\nIfDriving = False\nsglength = 300\n\n\n# Begin project code\ndef autocode():\n    global AutoSection\n    global IfDriving\n    if AutoSection == 0:\n        if not IfDriving:\n            IfDriving = True\n            AutoSection = AutoSection + 1\n            drivetrain.drive_for(REVERSE, 125, MM)\n            drivetrain.turn_for(LEFT, 90, DEGREES)\n            drivetrain.drive_for(REVERSE, 800, MM)\n            drivetrain.turn_for(RIGHT, 90, DEGREES)\n            drivetrain.drive_for(REVERSE, 1000, MM)\n            drivetrain.turn_for(RIGHT, 25, DEGREES)\n            IfDriving = False\n            while not Autonomous.pressing():\n                Autonomous.set_color(Color.BLUE)\n    elif AutoSection == 1:\n        if not IfDriving:\n            IfDriving = True\n            AutoSection = AutoSection + 1\n            Autonomous.set_color(Color.RED)\n            drivetrain.drive_for(REVERSE, 1175, MM)\n            drivetrain.turn_for(LEFT, 60, DEGREES)\n            drivetrain.turn_for(RIGHT, 150, DEGREES)\n            drivetrain.drive_for(REVERSE, 280, MM)\n            Autonomous.set_color(Color.BLACK)\n            IfDriving = False\n    else:\n        Autonomous.set_color(Color.WHITE)\n\ndef AutoRedo():\n    if AutoSection > -1:\n        AutoSection = AutoSection - 1\n        print(AutoSection)\n        drivetrain.stop()\n        IfDriving = False\n        Autonomous.set_color(Color.RED)\n    else:\n        AutoSection = 1\n        print(AutoSection)\n        drivetrain.stop()\n        IfDriving = False\n        Autonomous.set_color(Color.RED)\n\ndef LiftUp():\n    LiftRotation = 0\n    print(\"Lift going up!\")\n    while not TopBumper.pressing():\n        print(\"Rotation \" + LiftRotation)\n        Lift.spin_for(FORWARD, 1, TURNS)\n        LiftRotation = LiftRotation + 1\ndef LiftDown():\n    LiftRotation = 0\n    print (\"Lift going down\")\n    while not BottomBumper.pressing():\n        print(\"Rotation \"+ LiftRotation)\n        Lift.spin_for(REVERSE, 1, TURNS)\n        LiftRotation = LiftRotation + 1\ndef intaking():\n    Intake.spin_for(FORWARD, 10, TURNS, wait=False)\ndef newAutonomous():\n    global AutoSection\n    global sglength\n    global IfDriving\n    if AutoSection == 0:\n        if not IfDriving:\n            IfDriving = True\n            AutoSection = AutoSection + 1\n            drivetrain.drive_for(FORWARD, sglength, MM)\n            intaking()\n            drivetrain.drive_for(FORWARD, 100, MM)\n            intaking()\n            drivetrain.turn_for(LEFT, 90, DEGREES)\n            drivetrain.drive_for(FORWARD, 500, MM)\n            drivetrain.turn_for(LEFT, 90, DEGREES)\n            drivetrain.drive_for(FORWARD, 450, MM)\n            drivetrain.turn_for(RIGHT, 90, DEGREES)\n            drivetrain.drive_for(REVERSE, 900, MM)\n            LiftUp()\n            IfDriving = False\n            while not Autonomous.pressing():\n                Autonomous.set_color(Color.BLUE)\n    elif AutoSection == 1:\n        if not IfDriving:\n            LiftDown()\n            IfDriving = True\n            AutoSection = AutoSection + 1\n            drivetrain.drive_for(FORWARD, sglength, MM)\n            intaking()\n            drivetrain.drive_for(FORWARD, 100, MM)\n            intaking()\n            drivetrain.turn_for(LEFT, 90, DEGREES)\n            drivetrain.drive_for(FORWARD, 300, MM)\n            drivetrain.turn_for(RIGHT, 90, DEGREES)\n            drivetrain.drive_for(REVERSE, 400, MM)\n            LiftUp()\n            wait(5, SECONDS)\n            # Section 2.3\n            LiftDown()\n            drivetrain.turn_for(RIGHT, 30, DEGREES)\n            drivetrain.drive_for(FORWARD, 450, MM)\n            intaking()\n            drivetrain.turn_for(LEFT, 30, DEGREES)\n            drivetrain.drive_for(FORWARD, 100, MM)\n            intaking()\n            drivetrain.drive_for(FORWARD, 450, MM)\n            drivetrain.turn_for(LEFT, 90, DEGREES)\n            drivetrain.drive_for(FORWARD, 300, MM)\n            drivetrain.turn_for(LEFT, 90, DEGREES)\n            drivetrain.drive_for(REVERSE, 200, MM)\n            LiftUp()\n            wait(5, SECONDS)\n            # Section 2.6\n            LiftDown()\n            drivetrain.drive_for(FORWARD, 100, MM)\n            drivetrain.turn_for(RIGHT, 90, MM)\n            drivetrain.drive_for(REVERSE, 1500, MM)\n            IfDriving = False\n        else:\n            Autonomous.set_color(Color.WHITE)\n\n\n    \n\ncalibrate_drivetrain()\nAutonomous.pressed(autocode())\nAutonomousRedo.pressed(AutoRedo())\n\n#AutoSection 0 means starting section 1\n#AutoSection 1 means starting section 2\n#AutoSection 2 means during section 2 or end\n#If going from seg1 to beginning, press ONCE\n#If going from seg2 end to seg2 beginning, press ONCE\n#If going from seg2 end to beginning, press TWICE","textLanguage":"python","rconfig":[{"port":[1,2,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"integrated","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[6],"name":"Autonomous","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[7],"name":"AutonomousRedo","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[3,4],"name":"Lift","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[10,11],"name":"Intake","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[8],"name":"BottomBumper","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[9],"name":"TopBumper","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}