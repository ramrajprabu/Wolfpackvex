{"mode":"Blocks","workspace":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"_2.^beQjx|FGt38A,8(E\">myVariable</variable></variables><block type=\"iq_events_when_controller_button\" id=\"Q:s=ptu0+^f#~/QHzM6:\" x=\"-270\" y=\"-390\"><field name=\"BUTTON\">ButtonEUp</field><field name=\"EVENTTYPE\">released</field><next><block type=\"iq_motion_stop_driving\" id=\"7J(+?nV42[tt*yB#Bxcj\"></block></next></block><block type=\"iq_events_when_controller_button\" id=\"Z=AV6dwS[.h$]bI`UmQ:\" x=\"-270\" y=\"-250\"><field name=\"BUTTON\">ButtonEDown</field><field name=\"EVENTTYPE\">released</field><next><block type=\"iq_motion_stop_driving\" id=\"x-:0,}lb3Mm$D0Gv@sKz\"></block></next></block><block type=\"iq_events_when_controller_button\" id=\"!8wU$^,~65UuUkZc`byF\" x=\"-270\" y=\"-110\"><field name=\"BUTTON\">ButtonRUp</field><field name=\"EVENTTYPE\">released</field><next><block type=\"iq_motion_stop_driving\" id=\"4-]}p~Dx!DaeB9~J.T??\"></block></next></block><block type=\"iq_events_when_controller_button\" id=\"6vz}/VYxAP(cF5X%U-tT\" x=\"-270\" y=\"30\"><field name=\"BUTTON\">ButtonRDown</field><field name=\"EVENTTYPE\">released</field><next><block type=\"iq_motion_stop_driving\" id=\"c1N-P,(Dbl4-e@Yp0-$d\"></block></next></block><block type=\"iq_events_when_controller_button\" id=\",zqMMzl95#lr^?9L@)G0\" x=\"-270\" y=\"170\"><field name=\"BUTTON\">ButtonLDown</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_spin\" id=\"J0fjO5]1.d^rVQu~{q-=\"><field name=\"MOTOR\">Lift</field><field name=\"DIRECTION\">fwd</field></block></next></block><block type=\"iq_events_when_controller_button\" id=\"/R(Y#%t8V(huWL4;+xI1\" x=\"-270\" y=\"310\"><field name=\"BUTTON\">ButtonLUp</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_spin\" id=\"kC%r|[?oPx:uYtNqK;yE\"><field name=\"MOTOR\">Lift</field><field name=\"DIRECTION\">rev</field></block></next></block><block type=\"iq_events_when_controller_button\" id=\"eiH@A42MVmk#D*4%#N7-\" x=\"-270\" y=\"450\"><field name=\"BUTTON\">ButtonLDown</field><field name=\"EVENTTYPE\">released</field><next><block type=\"iq_motion_stop_motor\" id=\"C=-2wf(Ntm,sN[P[8BlS\"><field name=\"MOTOR\">Lift</field></block></next></block><block type=\"iq_events_when_controller_button\" id=\".v5nh=zpK0hAdzs^ibvi\" x=\"-270\" y=\"590\"><field name=\"BUTTON\">ButtonLUp</field><field name=\"EVENTTYPE\">released</field><next><block type=\"iq_motion_stop_motor\" id=\"%{8$!P4:|w!X2CCrF!Z`\"><field name=\"MOTOR\">Lift</field></block></next></block><block type=\"iq_events_when_controller_button\" id=\"pA?);$`pqWx{pY_qc)B,\" x=\"-270\" y=\"730\"><field name=\"BUTTON\">ButtonRUp</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_spin\" id=\"x8LQY^U*7BS+p0`-h:1e\"><field name=\"MOTOR\">Intake</field><field name=\"DIRECTION\">fwd</field></block></next></block><block type=\"iq_events_when_controller_button\" id=\"bsK?|:.7UB|8NwH3w?$G\" x=\"-270\" y=\"890\"><field name=\"BUTTON\">ButtonRDown</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_spin\" id=\"Lz1zGz@,ndDz$^SU?-un\"><field name=\"MOTOR\">Intake</field><field name=\"DIRECTION\">rev</field></block></next></block><block type=\"iq_events_when_controller_button\" id=\"3?(:[!mcYq8{R/mPd|Pj\" x=\"-270\" y=\"1050\"><field name=\"BUTTON\">ButtonRUp</field><field name=\"EVENTTYPE\">released</field><next><block type=\"iq_motion_stop_motor\" id=\"`Fy30adH;P=13|-=#I0~\"><field name=\"MOTOR\">Intake</field></block></next></block><block type=\"iq_events_when_controller_button\" id=\"0KX]uC.f7*Q7eSMfUZ~x\" x=\"-270\" y=\"1210\"><field name=\"BUTTON\">ButtonRDown</field><field name=\"EVENTTYPE\">released</field><next><block type=\"iq_motion_stop_motor\" id=\"@u/NB0Mrz7[7N]ZmKq^=\"><field name=\"MOTOR\">Intake</field></block></next></block></xml>","rconfig":[{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"Lift","leftDir":"false","right":"Intake","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"split"},"triportSourcePort":22},{"port":[1,2,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[3,4],"name":"Lift","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[10],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"downloadLanguage":"python","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\ncontroller Controller = controller();\nmotor LeftDriveSmart = motor(PORT1, 1, false);\nmotor RightDriveSmart = motor(PORT2, 1, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 200, 173, 76, mm, 1);\nmotor LiftMotorA = motor(PORT3, false);\nmotor LiftMotorB = motor(PORT4, true);\nmotor_group Lift = motor_group(LiftMotorA, LiftMotorB);\n\nmotor Intake = motor(PORT10, false);\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool ControllerLeftShoulderControlMotorsStopped = true;\nbool ControllerRightShoulderControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller = true;\nbool DrivetrainRNeedsToBeStopped_Controller = true;\n\n// define a task that will handle monitoring inputs from Controller\nint rc_auto_loop_function_Controller() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = AxisA + AxisC\n      // right = AxisA - AxisC\n      int drivetrainLeftSideSpeed = Controller.AxisA.position() + Controller.AxisC.position();\n      int drivetrainRightSideSpeed = Controller.AxisA.position() - Controller.AxisC.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonLUp/ButtonLDown status to control Lift\n      if (Controller.ButtonLUp.pressing()) {\n        Lift.spin(forward);\n        ControllerLeftShoulderControlMotorsStopped = false;\n      } else if (Controller.ButtonLDown.pressing()) {\n        Lift.spin(reverse);\n        ControllerLeftShoulderControlMotorsStopped = false;\n      } else if (!ControllerLeftShoulderControlMotorsStopped) {\n        Lift.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        ControllerLeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonRUp/ButtonRDown status to control Intake\n      if (Controller.ButtonRUp.pressing()) {\n        Intake.spin(forward);\n        ControllerRightShoulderControlMotorsStopped = false;\n      } else if (Controller.ButtonRDown.pressing()) {\n        Intake.spin(reverse);\n        ControllerRightShoulderControlMotorsStopped = false;\n      } else if (!ControllerRightShoulderControlMotorsStopped) {\n        Intake.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        ControllerRightShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nfloat myVariable;\n\n// \"when Controller ButtonEUp released\" hat block\nvoid onevent_ControllerButtonEUp_released_0() {\n  Drivetrain.stop();\n}\n\n// \"when Controller ButtonEDown released\" hat block\nvoid onevent_ControllerButtonEDown_released_0() {\n  Drivetrain.stop();\n}\n\n// \"when Controller ButtonRUp released\" hat block\nvoid onevent_ControllerButtonRUp_released_0() {\n  Drivetrain.stop();\n}\n\n// \"when Controller ButtonRDown released\" hat block\nvoid onevent_ControllerButtonRDown_released_0() {\n  Drivetrain.stop();\n}\n\n// \"when Controller ButtonLDown pressed\" hat block\nvoid onevent_ControllerButtonLDown_pressed_0() {\n  Lift.spin(forward);\n}\n\n// \"when Controller ButtonLUp pressed\" hat block\nvoid onevent_ControllerButtonLUp_pressed_0() {\n  Lift.spin(reverse);\n}\n\n// \"when Controller ButtonLDown released\" hat block\nvoid onevent_ControllerButtonLDown_released_0() {\n  Lift.stop();\n}\n\n// \"when Controller ButtonLUp released\" hat block\nvoid onevent_ControllerButtonLUp_released_0() {\n  Lift.stop();\n}\n\n// \"when Controller ButtonRUp pressed\" hat block\nvoid onevent_ControllerButtonRUp_pressed_0() {\n  Intake.spin(forward);\n}\n\n// \"when Controller ButtonRDown pressed\" hat block\nvoid onevent_ControllerButtonRDown_pressed_0() {\n  Intake.spin(reverse);\n}\n\n// \"when Controller ButtonRUp released\" hat block\nvoid onevent_ControllerButtonRUp_released_1() {\n  Intake.stop();\n}\n\n// \"when Controller ButtonRDown released\" hat block\nvoid onevent_ControllerButtonRDown_released_1() {\n  Intake.stop();\n}\n\n\nint main() {\n  // register event handlers\n  Controller.ButtonEUp.released(onevent_ControllerButtonEUp_released_0);\n  Controller.ButtonEDown.released(onevent_ControllerButtonEDown_released_0);\n  Controller.ButtonRUp.released(onevent_ControllerButtonRUp_released_0);\n  Controller.ButtonRUp.released(onevent_ControllerButtonRUp_released_1);\n  Controller.ButtonRDown.released(onevent_ControllerButtonRDown_released_0);\n  Controller.ButtonRDown.released(onevent_ControllerButtonRDown_released_1);\n  Controller.ButtonLDown.pressed(onevent_ControllerButtonLDown_pressed_0);\n  Controller.ButtonLUp.pressed(onevent_ControllerButtonLUp_pressed_0);\n  Controller.ButtonLDown.released(onevent_ControllerButtonLDown_released_0);\n  Controller.ButtonLUp.released(onevent_ControllerButtonLUp_released_0);\n  Controller.ButtonRUp.pressed(onevent_ControllerButtonRUp_pressed_0);\n  Controller.ButtonRDown.pressed(onevent_ControllerButtonRDown_pressed_0);\n\n  wait(15, msec);\n}","target":"Physical"}